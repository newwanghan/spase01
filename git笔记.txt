安装完成后：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

创建版本库：
git init

把文件添加到版本库：
第一步，用命令 git add 告诉Git，把文件添加到仓库：
$ git add readme.txt
第二步，用命令 git commit 告诉Git，把文件提交到仓库：
git commit -m "wrote a readme file"
 
git status 命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，
readme.txt被修改过了，但还没有准备提交的修改

查看修改：
git diff readme.txt
提交修改和提交新文件是一样的两步

显示从最近到最远的提交日志：
git log
如果嫌输出信息太多，看得眼花缭乱的看得眼花缭乱的，可以试试加上 --pretty=oneline 参数
git log --pretty=oneline

在Git中，用 HEAD 表示当前版本，上一个版本就是 HEAD^ ，上上一个版本就是 HEAD^^
回退到上一个版本：
git reset --hard HEAD^
回退到指定版本，3628164是commit id
git reset --hard 3628164

记录你的每一次命令：
git reflog

工作区和暂存区
工作区有一个隐藏目录 .git ，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存
区，还有Git为我们自动创建的第一个分支 master ，以及指向 master 的一个指
针叫 HEAD 。

提交后，用 git diff HEAD -- readme.txt 命令可以查看工作区和版本库里面
最新版本的区别

命令 git checkout -- readme.txt 意思就是，把 readme.txt 文件在工作区的

修改全部撤销，这里有两种情况：
一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版
本库一模一样的状态；（原始-改动）
git checkout -- readme.txt
一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到
添加到暂存区后的状态。（原始-改动-添加到暂存区-改动）
git checkout -- readme.txt
git reset HEAD readme.txt
git checkout -- readme.txt

删除文件：
1.本地删除test.txt
2.git rm test.txt
3.git commit -m "remove test.txt"

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复
到最新版本：
$ git checkout -- test.txt

远程仓库：
创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
在本地的 learngit 仓库下运行命令，将本地learngit仓库与远程的库关联：
$ git remote add origin git@github.com:michaelliao/learngit.git

以把本地库的所有内容推送到远程库上：
$ git push -u origin master（第一次推送加 -u）
从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master

从远程库克隆：
登陆GitHub，创建一个新的仓库，名字叫 gitskills
$ git clone git@github.com:newwanghan/spase01.git

分支管理：
创建 dev 分支，然后切换到 dev 分支：
$ git checkout -b dev
git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

查看当前分支：
$ git branch
切换回 master 分支：
$ git checkout master
把 dev 分支的工作成果合并到 master 分支上：
$ git merge dev
git merge 命令用于合并指定分支到当前分支。

删除 dev 分支了：
$ git branch -d dev

带参数的 git log 也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit
用 git log --graph 命令可以看到分支合并图。

合并 dev 分支，请注意 --no-ff 参数，表示禁用 Fast forward ：
$ git merge --no-ff -m "merge with no-ff" dev
看看分支历史：
$ git log --graph --pretty=oneline --abbrev-commit

把当前工作现场“储藏”起来：
$ git stash
用 git status 查看工作区，就是干净的

工作区是干净的，刚才的工作现场存到哪去了？用 git stash list 命令看看：
$ git stash list
Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用 git stash apply 恢复，但是恢复后，stash内容并不删除，你需要
用 git stash drop 来删除；
另一种方式是用 git stash pop ，恢复的同时把stash内容也删了：
再用 git stash list 查看，就看不到任何stash内容了：

恢复指定的stash：
$ git stash apply stash@{0}

丢弃一个没有被合并过的分支，可以通过 git branch -D 分支名称


查看远程库的信息：
$ git remote
$ git remote -v
推送分支：
$ git push origin master
如果要推送其他分支，比如 dev ，就改成：
$ git push origin dev

test










